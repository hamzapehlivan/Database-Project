CREATE TABLE User(
	user_id	INT PRIMARY KEY AUTO_INCREMENT,
	email		VARCHAR(45) NOT NULL UNIQUE,
	password	VARCHAR(45) NOT NULL,
	fullname	VARCHAR(45) NOT NULL,
	phone		VARCHAR(10) );


CREATE TABLE Profile (
	profile_id		INT PRIMARY KEY AUTO_INCREMENT,
	linkedin_link		VARCHAR(50) UNIQUE,
	experienced_years	INT,
	status 			BOOLEAN NOT NULL,
        cv_link 		VARCHAR(50) UNIQUE,
     	github_link 		VARCHAR(50) UNIQUE );


CREATE TABLE Developer(
	developer_id		INT PRIMARY KEY,
	profile_id		INT NOT NULL,
	FOREIGN KEY (developer_id) REFERENCES User (user_id),
	FOREIGN KEY (profile_id) REFERENCES Profile (profile_id) );


CREATE TABLE Company(
	company_id		INT PRIMARY KEY AUTO_INCREMENT,
	website		VARCHAR(45) NOT NULL UNIQUE,
	company_name	VARCHAR(45) NOT NULL,
	short_information	TEXT(200) NOT NULL );


CREATE TABLE Representative(
	representative_id		INT PRIMARY KEY,
	subscription_type		VARCHAR(5) NOT NULL,
	title				VARCHAR(45) NOT NULL,
	company_id			INT NOT NULL,
	FOREIGN KEY (representative_id) REFERENCES User (user_id),
	FOREIGN KEY (company_id) REFERENCES Company (company_id));


CREATE TABLE Admin(
	admin_id		INT PRIMARY KEY,
	FOREIGN KEY (admin_id) REFERENCES User (user_id) );


CREATE TABLE PreferredWorkingLocations(
	profile_id		INT,
	city			VARCHAR(15),
	PRIMARY KEY (profile_id, city),
	FOREIGN KEY (profile_id) REFERENCES Profile (profile_id) );


CREATE TABLE CompanyBlackList (
	profile_id	INT,
	company_id	INT,
	PRIMARY KEY (profile_id, company_id),
	FOREIGN KEY (profile_id) REFERENCES Profile (profile_id),
	FOREIGN KEY (company_id) REFERENCES Company (company_id) );


CREATE TABLE ProjectInfo (
	profile_id	INT,
	project_title	VARCHAR(30),
	start_date	DATE,
	end_date	DATE,
       	project_type  	VARCHAR(20),
        description	VARCHAR(100) NOT NULL,
	project_link	VARCHAR(100),
	PRIMARY KEY (profile_id, project_title, start_date),
	FOREIGN KEY (profile_id) REFERENCES Profile (profile_id) );


CREATE TABLE WorkInfo (
	profile_id	INT,
	company_name	VARCHAR(45),
	start_date	DATE,
     	end_date	DATE,
	title 		VARCHAR(20) NOT NULL,
        description	VARCHAR(100) NOT NULL,
	PRIMARY KEY(profile_id, company_name, start_date),
	FOREIGN KEY (profile_id) REFERENCES profile (profile_id) );


CREATE TABLE EducationInfo (
	profile_id		INT,
	institution_name	VARCHAR(45),
	start_date		DATE,
	end_date		DATE,
     	isGraduted		TINYINT(1) NOT NULL,
	cgpa			DOUBLE NOT NULL,
        description		VARCHAR(100),
	PRIMARY KEY(profile_id, institution_name, start_date),
	FOREIGN KEY (profile_id) REFERENCES Profile (profile_id) );


CREATE TABLE question (
 	question_id 		INT PRIMARY KEY AUTO_INCREMENT,
  	admin_id 		INT NOT NULL,
  	description 		VARCHAR(200) NOT NULL UNIQUE,
  	difficulty 		ENUM('easy','medium','hard') NOT NULL,
      	FOREIGN KEY (admin_id) REFERENCES admin (admin_id) );


CREATE TABLE choice (
	choice_id 		INT,
	question_id 		INT,
	choice_text 		VARCHAR(45) NOT NULL,
  	isCorrectAnswer 	TINYINT(1) NOT NULL,
	PRIMARY KEY (choice_id, question_id),
	FOREIGN KEY (question_id) REFERENCES question (question_id) );


CREATE TABLE category (
	category_name VARCHAR(15) PRIMARY KEY );


CREATE TABLE categorized_as (
	category_name 	VARCHAR(15),
 	question_id 		INT,
	PRIMARY KEY(category_name,question_id),
	FOREIGN KEY (category_name) REFERENCES category (category_name),
 	FOREIGN KEY (question_id) REFERENCES question (question_id) );


CREATE TABLE quiz (
	quiz_id 		INT PRIMARY KEY AUTO_INCREMENT,
  	admin_id 		INT NOT NULL,
  	category_name 	VARCHAR(15) NOT NULL,
  	total_questions 	INT NOT NULL,
  	quiz_title 		VARCHAR(10) NOT NULL,
  	time 			TIME NOT NULL,
  	FOREIGN KEY (admin_id) REFERENCES admin (admin_id),
  	FOREIGN KEY (category_name) REFERENCES category (category_name));


CREATE TABLE quiz_questions (
 	quiz_id 		INT,
   	question_id 		INT,
	PRIMARY KEY(quiz_id, question_id),
 	FOREIGN KEY (question_id) REFERENCES question (question_id),
	FOREIGN KEY (quiz_id) REFERENCES quiz (quiz_id) );


CREATE TABLE quiztrial (
  	attempt_id 		INT PRIMARY KEY AUTO_INCREMENT,
 	developer_id 	INT NOT NULL,
  	quiz_id 		INT NOT NULL,
  	date 			DATE NOT NULL,
  	isSuccessful 		TINYINT(1),
	total_score               INT,
 	FOREIGN KEY (developer_id) REFERENCES developer (developer_id),
	FOREIGN KEY (quiz_id) REFERENCES quiz (quiz_id) );


CREATE TABLE answer (
 	attempt_id 		INT,
 	question_id 		INT,
  	choice_id		INT,             
 	iscorrect 		TINYINT(1) NOT NULL,
	PRIMARY KEY(attempt_id, question_id, choice_id),
   	FOREIGN KEY (attempt_id) REFERENCES quiztrial (attempt_id),
	FOREIGN KEY (question_id) REFERENCES question (question_id),
	FOREIGN KEY (choice_id) REFERENCES choice(choice_id) );


CREATE TABLE tries(
 	developer_id 		INT,
  	quiz_id 		INT,
	remaining_attemps 	INT NOT NULL DEFAULT 3,
	PRIMARY KEY(developer_id, quiz_id),
   	FOREIGN KEY (developer_id) REFERENCES developer (developer_id),
    	FOREIGN KEY (quiz_id) REFERENCES quiz (quiz_id) );


CREATE TABLE Request(
	request_id 		INT PRIMARY KEY,
	acceptedStatus 	ENUM ('accepted', 'declined', 'waiting') NOT NULL,
	date 			DATE NOT NULL,
	job_description 	VARCHAR (100) NOT NULL,
	developer_id 	INT NOT NULL,
	representative_id	INT NOT NULL,
	FOREIGN KEY (developer_id) REFERENCES Developer (developer_id),
	FOREIGN KEY (representative_id) REFERENCES Representative (representative_id) );